Day 09 Notes
============
SQL & MYSQL
===========
Setting up the database
-----------------------
Download and Install
- MySQL Server 8.0.34
- MySQL Workbench 8.0.34
- MySQL Shell 8.0.34

MySQL Overview
--------------
What is Database?
Where is it needed?

Refer image: 01_mysql_db.png

See Notes: 01 MySQL Server.txt

MySQL Client/Server Model
-------------------------
- The data stored in MySQL Server cannot be accessed directly.

- To do this we need client softwares and programs

- MySQL Server has the mechanism to store data as well as communicate with client program to exchange data

Refer Image: 02_client_server.png

Following are some more clients:
1. SQL Yog
2. PHP My Admin
3. DBeaver

MySQL Connectors
----------------
- To connect one software with another, we need drivers.

- Inorder for our applications written in different programming languages we need to install drivers at client side.

- These drivers are known as Connectors

- MySQL provides standards-based drivers for JDBC, and .Net enabling developers to build database applications in their language of choice.

- Download mysql connector jar for JDBC

DBMS
====
- DBMS stands for Database Management System.
- There are 2 major types of DBMS that are active:
	1. RDBMS
	2. Non RDBMS

Basics of Relational Databases
------------------------------
Database -- Expressed As --> Schema

Database -- Organises data in --> Tables

Tables -- Organises data in --> Rows and Columns

Refer notes : 02 RDBMS.txt

SQL Language
------------
SQL is used to talk with database.
Refer notes: 03 SQL.txt

SQL DDL
-------
Creating a Database
-------------------
CREATE SCHEMA school;

Creating a Table
----------------
CREATE TABLE students (
  _id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(45) NULL,
  email VARCHAR(45) NULL,
  course VARCHAR(45) NOT NULL,
  fees VARCHAR(45) NOT NULL,
  enrollment_date DATE NOT NULL,
  PRIMARY KEY (_id),
  UNIQUE INDEX _id_UNIQUE (_id ASC) VISIBLE,
  UNIQUE INDEX email_UNIQUE (email ASC) VISIBLE);

Showing How a Table Was Created
-------------------------------
Query: SHOW CREATE TABLE students;
Result: The create table query for current table

#Some queries return something, some queries don't

Alter the structure of table
----------------------------
Query: Change the name, data type and length of some columns with alter command. Alter is used to alter the structure of the database.

ALTER TABLE students 
CHANGE COLUMN _id student_id INT NOT NULL,
CHANGE COLUMN name student_name VARCHAR(30) NOT NULL ,
CHANGE COLUMN email student_email VARCHAR(30) NOT NULL ,
CHANGE COLUMN course student_course VARCHAR(20) NULL ,
CHANGE COLUMN fees course_fees DOUBLE NULL ,
CHANGE COLUMN enrollment_date course_enrollment_date DATE NULL ;

Lets run this query again

Query: SHOW CREATE TABLE students;
Result: The create table query for current table

Deleting database and tables
----------------------------
Syntax: DROP TABLE table_name;
Syntax: DROP DATABASE schema_name;

Creating New Table Using an Existing Table
------------------------------------------
We can create one table from another by adding a SELECT statement at the end of the CREATE TABLE statement: 

This query will also bring in the data from the original table.

This copying of whole table is known as Simple Cloning

Syntax : 
CREATE TABLE new_tbl SELECT * FROM orig_tbl;

Query: 
CREATE TABLE course_1 SELECT * FROM students;

If we want to create a new table and bring only specific data

CREATE TABLE course_2 AS SELECT * FROM students WHERE course_fees>=8000;

Create a new table from an existing with some new columns and selective columns of old table

CREATE TABLE student_1 (id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY (id)) SELECT student_name,student_course FROM students;

Copying only the structure of table
-----------------------------------
Shallow Cloning

Syntax : CREATE TABLE new_table LIKE old_table;
Query : CREATE TABLE course LIKE students1;

INSERT : It is used to insert data into a table.

Syntax1: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); 

Query 4: INSERT INTO students (student_id, student_name, student_email, student_course, course_fees, course_enrollment_date) VALUES ('101', 'Harsh', 'harsh@gmail.com', 'Core Java', '5000', '2023-05-29');

Query 5: Insert query without column names

INSERT INTO students VALUES (102, 'Madhavi', 'madhavi@yahoo.com', 'Core Python', 18000, '2023-06-01');

Query 6: Insert multiple records at once

INSERT INTO students VALUES 
(103, 'Yash', 'yash@hotmail.com', 'Advanced Java', 12000, '2022-12-31'),
(104, 'Mithun', 'mithun@hotmail.com', 'Core Java', 5000, '2023-06-30'),
(105, 'Raj', 'raj@gmail.com', 'Advanced Java', 8000, '2022-12-31'),
(106, 'Shekhar', 'shekhar@yahoo.com', 'Core Python', 5000, '2023-01-01'), 
(107, 'Sapna', 'sapna@gmail.com', 'Advanced PHP', 10000, '2023-06-07');
----------X--------------